#!/bin/sh

function usage () {
	if test -n "$1"
	then
		cat >&2 << EOF

$1
EOF
	fi
	s=$(echo "$0" | sed 's/./ /g')
	cat >&2 << EOF

Usage: $0 [-R|-T|-I <mount>]
       $s [-a <audio language|index>]
       $s [-s <subtitle language|index>]
       $s [-d device]
       $s <title> [output dir]

	-I     information: output audio/subtitle streams and exit
	-R     rescue mode: use ddrescue to read disc
	-T  transcode only: skip ripping from disc
	-d          device: the disc block device (default /dev/dvd)
	-a    audio select: language (e.g. English) or index (e.g. 1)
	-s subtitle select: language (e.g. English) or index (e.g. 1)

EOF
	exit 1
}

function cmdreq () {
	while test $# -gt 0
	do
		if ! command -v $1 >/dev/null
		then
			echo "Missing $1" >&2
			FAIL=true
		fi
		shift
	done
}

DEVICE=/dev/dvd
AUDIO=""
SUBTITLE=""
RIP=true
INFOANDEXIT=false
RESCUE=false
FAIL=false
PIECEMEAL=false
EXCFLAG=false

function exclusive () {
	if $EXCFLAG
	then
		usage "The -I, -R, and -T flags are mutually exclusive"
	fi
	EXCFLAG=true
}

while getopts ":RTI:d:a:s:" opt
do
	case "$opt" in
		I)
			exclusive
			INFOANDEXIT=true
			VIDEODIR="$OPTARG"/VIDEO_TS
			shift
			shift
			OPTIND=1
			cmdreq ffprobe jq lsdvd xpath
			if ! test -d "$VIDEODIR" -a -r "$VIDEODIR"
			then
				echo "Cannot find video in '$VIDEODIR'" >&2
				FAIL=true
			fi
			;;
		T)
			exclusive
			RIP=false
			shift
			OPTIND=1
			;;
		R)
			exclusive
			RESCUE=true
			shift
			OPTIND=1
			cmdreq ddrescue
			;;
		d)
			DEVICE="$OPTARG"
			shift
			shift
			OPTIND=1
			;;
		a|s)
			PIECEMEAL=true
			if test $opt = a
			then
				AUDIO="$OPTARG"
			else
				SUBTITLE="$OPTARG"
			fi
			shift
			shift
			OPTIND=1
			cmdreq ffprobe jq lsdvd xpath
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			FAIL=true
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			FAIL=true
			;;
	esac
done

$INFOANDEXIT || cmdreq ffmpeg
$RIP && cmdreq dvdbackup

if $FAIL || test $# -lt 1 -o $# -gt 2
then
	usage
fi

TITLE="$1"
OUTPUTDIR="$2"

if $RIP || $INFOANDEXIT
then
	# verify DVD block device
	if ! test -b "$DEVICE" -o -c "$DEVICE"
	then
		usage "Device not found: '$DEVICE'"
	fi
fi

# verify title number
if ! test "$TITLE" -ge 1 -a "$TITLE" -le 99
then
	usage "Title must be a number 1 to 99"
fi

# streaminfo <audio output file> <subtitles output file>
function streaminfo () {
	_dvdaudio=$1
	_dvdsubs=$2
	_langxml=$(mktemp)
	lsdvd -Ox -a -s -t $TITLE "$DEVICE" 2>/dev/null >$_langxml
	xpath '//audio/ix | //audio/language | //audio/streamid' \
		<$_langxml 2>/dev/null |\
		sed -e 's,</streamid>,%,g' \
			-e 's,<ix>,,g' \
			-e 's,</[a-z]*><[a-z]*>,	,g' |\
		tr '%' '\012' |\
		tr -d ' ' |\
		grep -v '^\s*$' |\
		sort -n >$_dvdaudio
	xpath '//subp/ix | //subp/language | //subp/streamid' \
		<$_langxml 2>/dev/null |\
		sed -e 's,</streamid>,%,g' \
			-e 's,<ix>,,g' \
			-e 's,</[a-z]*><[a-z]*>,	,g' |\
		tr '%' '\012' |\
		tr -d ' ' |\
		grep -v '^\s*$' |\
		sort -n >$_dvdsubs
	rm -f $_langxml
}

# vobstreams <.VOB>
function vobstreams () {
	ffprobe -print_format json \
		-show_entries stream=index,codec_type,id \
		-i "$1" 2>/dev/null
}

if $INFOANDEXIT
then
	INFODIR=$(mktemp -d)
	cd $INFODIR
	DVDAUDIO=audio
	DVDSUBS=subs
	_prefix="$VIDEODIR"/VTS_$(printf %02d $TITLE)_
	for vob in ${_prefix}*.VOB
	do
		_outfile=$(echo "$vob" | sed 's@'"$_prefix"'\([0-9][0-9]*\)\.VOB@\1@')
		vobstreams "$vob" |\
			jq -r '.streams[]|.codec_type + "	" + .id' \
			2> /dev/null > $_outfile
	done
	streaminfo ${DVDAUDIO}.txt ${DVDSUBS}.txt
	sed 's/^[0-9]*/audio/' ${DVDAUDIO}.txt > $DVDAUDIO
	sed 's/^[0-9]*/subtitle/' ${DVDSUBS}.txt > $DVDSUBS
	echo $INFODIR
	echo [0-9]*
	awk '
		$1 == "audio" {
			matched = audio[$NF]
			if (NF == 2) {
				if (length(matched)) {
					audio[$2] = matched "," FILENAME
				} else {
					audio[$2] = FILENAME
				}
			} else if (NF == 3) {
				if (length(matched)) {
					print $0,matched
				} else {
					print
				}
			}
		}
		$1 == "subtitle" {
			matched = subtitle[$NF]
			if (NF == 2) {
				if (length(matched)) {
					subtitle[$2] = matched "," FILENAME
				} else {
					subtitle[$2] = FILENAME
				}
			} else if (NF == 3) {
				if (length(matched)) {
					print $0,matched
				} else {
					print
				}
			}
		}
		' [0-9]* $DVDAUDIO $DVDSUBS
	cd /
	rm -rf $INFODIR
	exit 0
fi

# verify output dir
if test -z "$OUTPUTDIR"
then
	OUTPUTDIR=$(mktemp -d)
elif test -e "$OUTPUTDIR"
then
	if ! test -d "$OUTPUTDIR"
	then
		usage "Not a directory: '$OUTPUTDIR'"
	fi
else
	printf "Directory '$OUTPUTDIR' does not exist. Create it (Y/n)? " >&2
	read _response
	case "$_response" in
		[yY]*|"") mkdir "$OUTPUTDIR" || exit 2 ;;
		*) exit 3
	esac
fi

cd "$OUTPUTDIR"

# streamidfor <selection> <file> <type>
function streamidfor () {
	_selection="$1"
	_file="$2"
	_type="$3"
	if test . = "$_selection"
	then
		_needsinput=true
		while $_needsinput
		do
			cat $_file >&2
			echo -n "Choose $_type: " >&2
			read _found
			_found=$(grep "^$_found	" $_file | cut -f3)
			if test -n "$_found"
			then
				_needsinput=false
				echo $_found
			fi
		done
	elif ! expr 1 + "$_selection" >/dev/null 2>&1
	then
		_found=$(grep -i "	$_selection	" $_file | cut -f3)
		if test -z "$_found"
		then
			usage "Cannot find $_type stream '$_selection'"
		fi
		echo "$_found"
	elif test $(wc -l < $_file) -lt $_selection
	then
		usage "Cannot find $_type stream '$_selection'"
	else
		_found=$(grep "^$_selection	" $_file | cut -f3)
		if test -z "$_found"
		then
			usage "Cannot find $_type stream '$_selection'"
		fi
		echo "$_found"
	fi
}

if $PIECEMEAL
then
	DVDAUDIO=$(mktemp)
	DVDSUBS=$(mktemp)
	streaminfo $DVDAUDIO $DVDSUBS
	if test -z "$AUDIO"
	then
		AUDIO=1
	fi
	AUDIO=$(streamidfor "$AUDIO" $DVDAUDIO audio)
	if test -n "$SUBTITLE"
	then
		SUBTITLE=$(streamidfor "$SUBTITLE" $DVDSUBS subtitle)
	fi
	rm -f $DVDAUDIO $DVDSUBS
fi

if $RIP
then
	if $RESCUE
	then
		VOBSRC=dvd.iso
		ddrescue "$DEVICE" "$VOBSRC"
	else
		VOBSRC="$DEVICE"
	fi
	dvdbackup -t "$TITLE" -o . -i "$VOBSRC" -p -n movie
fi

TRANSCODEOPTS="\
	-c:a libfdk_aac -vbr 5 \
	-c:v libx264 -profile:v high -level 4.0 -crf 20 \
	-pix_fmt yuv420p -threads 0 \
	"
w="ffffff"
b="000000"
g="00ff00"
PALETTE="-palette $w,$b,$w,$g,$w,$w,$w,$w,$w,$w,$w,$w,$w,$w,$w,$w"

RUNSCRIPT=$(mktemp)
PROBEJSON=$(mktemp)

# codecstream <codec_type> <streamid>
function codecstream () {
	jq '.streams|
	    map(select((.codec_type == "'$1'") and (.id == "'$2'")))|
	    .[].index' $PROBEJSON 2> /dev/null
}

# streammap <VOB file>
function streammap () {
	vobstreams "$1" > $PROBEJSON
	if test -n "$SUBTITLE"
	then
		_streamindex=$(codecstream subtitle "$SUBTITLE")
		if test -n "$_streamindex"
		then
			echo "-filter_complex '[0:v][0:${_streamindex}]overlay[v]' -map '[v]'"
		else
			echo "-map 0:v"
		fi
	else
		echo "-map 0:v"
	fi
	_streamindex=$(codecstream audio "$AUDIO")
	if test -n "$_streamindex"
	then
		echo "-map 0:${_streamindex}"
	else
		echo "-map 0:a"
	fi
}

# transcode <infile> <outfile>
function transcode () {
	echo ffmpeg -y $PALETTE -i "'$1'" \
		$(streammap "$1") \
		$TRANSCODEOPTS -f mpegts "'$2'"
}

if $PIECEMEAL
then
	CONCAT=""
	for vob in $(find movie/VIDEO_TS -iname '*.VOB')
	do
		CONCAT="$CONCAT"'|'"$vob".ts
		transcode "$vob" "$vob".ts >> $RUNSCRIPT
	done

	# get rid of pipe char at the beginning of the list
	CONCAT="$(echo "$CONCAT" | cut -c2-)"
	echo ffmpeg -y -i concat:"'$CONCAT'" \
		-c:v copy -c:a copy \
		movie.m4v >> $RUNSCRIPT
else
	CONCAT=$(find movie/VIDEO_TS -iname '*.VOB' | awk '
		NR > 1 { printf("|") }
		{ printf("%s", $0) }
		END { printf("\n") }')
	echo ffmpeg -y -i concat:"'$CONCAT'" \
		$TRANSCODEOPTS movie.m4v >> $RUNSCRIPT
fi

sh -x $RUNSCRIPT
rm -f $RUNSCRIPT $PROBEJSON

